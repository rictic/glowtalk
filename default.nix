{ pkgs ? import <nixpkgs> { } }:

let
  src = ./.; # 1. Import Project Source

  # 3. Frontend Build
  frontendBuild = pkgs.stdenv.mkDerivation {
    pname = "glowtalk-frontend";
    version = "0.1.0"; # Or derive from package.json if desired
    inherit src;

    buildInputs = [
      pkgs.nodejs_20 # Node.js (latest stable version, e.g., 20.x)
      pkgs.nodePackages.esbuild # esbuild (can be fetched via nodePackages)
    ];

    sourceRoot = "${src.outPath}/glowtalk/static"; # Correctly navigate to the static directory

    buildPhase = ''
      runHook preBuild
      echo "Building frontend assets in $(pwd)..."
      # The command from glowtalk/static/package.json
      esbuild src/main.tsx --bundle --outfile=dist/bundle.js --sourcemap --minify --define:process.env.NODE_ENV=\\"production\\"
      # Assuming esbuild handles CSS bundling if imported in main.tsx, or it's not a separate step.
      # If bundle.css is generated by the above command, it will be in 'dist/'
      # If there's a separate command for CSS, it should be added here.
      # For now, we ensure the 'dist' directory exists for the installPhase.
      mkdir -p dist 
      # Check if bundle.css is present, if not, create a placeholder or log a warning
      # This is a common pattern if CSS is handled via JS imports.
      if [ ! -f dist/bundle.css ]; then
        echo "Warning: dist/bundle.css not found after esbuild. If CSS is expected, check build process."
        # touch dist/bundle.css # Optionally create an empty file if needed by subsequent steps
      fi
      runHook postBuild
    '';

    installPhase = ''
      runHook preInstall
      echo "Installing frontend assets..."
      # Copy the glowtalk/static/dist directory into $out/static/dist
      mkdir -p $out/static
      cp -R dist $out/static/
      runHook postInstall
    '';
  };

  # 4. Python Application Build (Main Derivation)
  pythonApplication = pkgs.python311Packages.buildPythonApplication {
    pname = "glowtalk";
    version = "0.1.0"; # From pyproject.toml
    inherit src;

    # buildPythonApplication uses pipBuildHook by default, which should handle hatchling
    nativeBuildInputs = with pkgs.python311Packages; [
      hatchling # Build backend
    ] ++ (with pkgs; [
      # Any other native build deps for python modules, if necessary
    ]);

    buildInputs = [
      pkgs.ffmpeg # System dependency for ffmpeg-python and pydub
    ] ++ (
      # Conditional dependencies like pyobjc
      if pkgs.stdenv.isDarwin then [
        # macOS specific system libraries if needed by pyobjc or other packages
      ] else [
        # Linux specific system libraries if needed (e.g. for tts: espeak, alsa-lib, etc.)
        # For tts, common dependencies include:
        pkgs.espeakng # A common backend for TTS
        pkgs.alsaLib # If ALSA audio is used
        # Add other potential TTS engine dependencies if known or if build fails
      ]
    );

    propagatedBuildInputs = with pkgs.python311Packages; [
      tts
      beautifulsoup4
      sqlalchemy
      pysbd
      alembic
      fastapi
      uvicorn
      pydantic
      python-multipart
      httpx
      ffmpeg-python # Python bindings for ffmpeg
      pydub
      sse-starlette
    ] ++ (if pkgs.stdenv.isDarwin then [ pkgs.python311Packages.pyobjc ] else [ ]);

    # postInstall phase to copy frontend assets
    postInstall = ''
      echo "Copying frontend assets to site-packages..."
      # Target directory within the Python package
      # $out refers to the output path of this derivation
      # The path needs to match where glowtalk expects its static files.
      # Assuming glowtalk/static/dist relative to the package root.
      target_static_dir="$out/lib/python3.11/site-packages/glowtalk/static"
      mkdir -p $target_static_dir
      cp -R ${frontendBuild}/static/dist $target_static_dir/
    '';

    # Check phase - can add tests here later if needed
    # doCheck = true;
    # checkInputs = with pkgs.python311Packages; [ pytest ];
    # checkPhase = ''
    #   pytest tests
    # '';

    meta = with pkgs.lib; {
      description = "Generate audiobooks for Glowfics";
      homepage = "https://github.com/your-repo/glowtalk"; # Replace with actual repo
      license = licenses.mit; # Assuming MIT from pyproject.toml
      # maintainers = with maintainers; [ your-github-handle ]; # Replace with actual maintainer
    };
  };

in
{
  # The package derivation
  package = pythonApplication;

  # The development shell, importing shell.nix
  # Pass pkgs to the shell.nix function
  devShell = import ./shell.nix { inherit pkgs; };
}
